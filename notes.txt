

;; Instal Elixir on Mac OS by running `brew update` and `brew install elixir`


;; Generate new project
mix new `project name`

;; How to start an Elixir Repl
;; iex - interative Elixir shell
iex -S mix
;; `recompile` - command to load new code into repl

;; Module
A collection of different methods/functions


;; For loops
for loops in elixir are called list comprehension
items <- list
it is inherently a map operation


;;pattern matching
it is elixir's replacement for variable assignment (destructuring ???)


;;Atoms
:keyword  (keywords in Clojure)

;;Installing a package in your project
1. Go to mix.exs file
2. Add package as a tuple {:package "~> version} in deps array
3. Run mix deps.get -> install packages
4. Write documentation, @moduledoc for module, @doc for functions
5. Run mix docs


;; Testing
Run mix test
to run tests.
Types of types: doctest and case tests

;; Maps
colors = %{primary: "red", secondary: "blue"}
colors.primary  # dot notation
"red"
;; Works with pattern matching as well
 %{secondary: secondary_color} = colors
secondary_color
"blue: 
;; Updating a map
method 1  Map.put(colors, :primary,  "blue")  -> returns a new map with the updated value
method 2  %{colors | primary: "blue"} -> can only be used when you're updating an existing property of a map. Cannot be used to add a new property.


;; Keyword Lists
 colors = [{:primary, "red"}, {:secondary, "green"} ]
[primary: "red", secondary: "green"]
colors[:primary]
"red"
;; or
colors = [primary: "red", secondary: "green"]
;;good to know
[primary: "red", primary: "green"] -> this is allowed with keyword lists
